#pragma once
//#include <time.h>
//#define time x

//Следующий закомментированный кусок кода должен работать аналогично используемой мнемонике.
//Но Visual Studio выдаёт ошибку E0028, поэтому данный код не реализован в программе.
//Его работа основана на константе __TIMESTAMP__.
//Она приводится в число и берётся для xor.
//Она время компиляции, что влечёт отличие значений операций для каждой скомпилированной программы значения операций.

/*static unsigned long time = (unsigned int)__TIMESTAMP__;

typedef enum {
    // Положить значение на стек. Этот параметр имеет один аргумент
    PUSH = 0x00d00201 ^ x,
    // Получить значение со стека. Берется верхушка стека
    POP = 0x00d00205 ^ x,
    // Сложить два верхних значения стека
    ADD = 0x00d00202 ^ x,
    // Вычесть два верхних значения стека
    SUB = 0x00d00206 ^ x,
    // Поделить два значения
    DIV = 0x00d00203 ^ x,
    // Перемножить два значения. Во всех четырех операциях результат кладется на стек
    MUL = 0x00d00204 ^ x,
    // Ввести данные
    ENTER = 0x00d00211 ^ x,
    // Сверка данных с шаблоном
    TEST = 0x00d00209 ^ x,
    // Вывести верхушку стека
    PRINT = 0x00d00210 ^ x,
    // Вывести все данные, которые находятся в нашей памяти
    RAM = 0x00d00208 ^ x,
    // Завершить работу виртуальной машины
    EXIT = 0x00d00207 ^ x,
} mnemonics;*/

typedef enum
{
	PUSH = 0x00d00201, //Положить значение на стек. Один аргумент. 1
	POP = 0x00d00205, // Получить значение со стека (верхушка). 2
	ADD = 0x00d00202, // Сложить два верхних значения стека. 3
	SUB = 0x00d00206, // Вычесть два верхних значения стека. 4
	DIV = 0x00d00203, // Поделить два значения. 5
	MUL = 0x00d00204, // Перемножить два значения. Во всех четырех операциях результат кладется на стек. 6
	ENTER = 0x00d00211, // Ввести данные. 7
	TEST = 0x00d00209, // Сверка данных с шаблоном. 8
	PRINT = 0x00d00210, // Вывести верхушку стека. 9
	RAM = 0x00d00208, // Вывести все данные, которые находятся в нашей памяти. 10
	EXIT = 0x00d00207 // Завершить работу виртуальной машины. 11
} mnemonics;
